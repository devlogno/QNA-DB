# models/question_models.py
from extensions import db

class Level(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    streams = db.relationship('Stream', backref='level', lazy='dynamic', cascade="all, delete-orphan")

class Stream(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    level_id = db.Column(db.Integer, db.ForeignKey('level.id'), nullable=False)
    boards = db.relationship('Board', backref='stream', lazy='dynamic', cascade="all, delete-orphan")
    __table_args__ = (db.UniqueConstraint('name', 'level_id', name='_stream_level_uc'),)

class Board(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    tag = db.Column(db.String(20), nullable=True)
    stream_id = db.Column(db.Integer, db.ForeignKey('stream.id'), nullable=False)
    subjects = db.relationship('Subject', backref='board', lazy='dynamic', cascade="all, delete-orphan")
    __table_args__ = (db.UniqueConstraint('name', 'stream_id', name='_board_stream_uc'),)

class Subject(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    board_id = db.Column(db.Integer, db.ForeignKey('board.id'), nullable=False)
    chapters = db.relationship('Chapter', backref='subject', lazy='dynamic', cascade="all, delete-orphan")
    __table_args__ = (db.UniqueConstraint('name', 'board_id', name='_subject_board_uc'),)

class Chapter(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    subject_id = db.Column(db.Integer, db.ForeignKey('subject.id'), nullable=False)
    topics = db.relationship('Topic', backref='chapter', lazy='dynamic', cascade="all, delete-orphan")
    __table_args__ = (db.UniqueConstraint('name', 'subject_id', name='_chapter_subject_uc'),)

class Topic(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    chapter_id = db.Column(db.Integer, db.ForeignKey('chapter.id'), nullable=False)
    __table_args__ = (db.UniqueConstraint('name', 'chapter_id', name='_topic_chapter_uc'),)

class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    question_text = db.Column(db.Text, nullable=False)
    question_image_url = db.Column(db.String(200), nullable=True)
    question_type = db.Column(db.String(10), nullable=False)
    year = db.Column(db.Integer, nullable=False)
    complexity = db.Column(db.Integer, nullable=False, default=5)
    level_id = db.Column(db.Integer, db.ForeignKey('level.id'), nullable=False)
    stream_id = db.Column(db.Integer, db.ForeignKey('stream.id'), nullable=True)
    board_id = db.Column(db.Integer, db.ForeignKey('board.id'), nullable=True)
    subject_id = db.Column(db.Integer, db.ForeignKey('subject.id'), nullable=True)
    chapter_id = db.Column(db.Integer, db.ForeignKey('chapter.id'), nullable=True)
    topic_id = db.Column(db.Integer, db.ForeignKey('topic.id'), nullable=True)
    level = db.relationship('Level', backref='questions')
    stream = db.relationship('Stream', backref='questions')
    board = db.relationship('Board', backref='questions')
    subject = db.relationship('Subject', backref='questions')
    chapter = db.relationship('Chapter', backref='questions')
    topic = db.relationship('Topic', backref='questions')
    option_a = db.Column(db.Text, nullable=True)
    option_a_image_url = db.Column(db.String(200), nullable=True)
    option_b = db.Column(db.Text, nullable=True)
    option_b_image_url = db.Column(db.String(200), nullable=True)
    option_c = db.Column(db.Text, nullable=True)
    option_c_image_url = db.Column(db.String(200), nullable=True)
    option_d = db.Column(db.Text, nullable=True)
    option_d_image_url = db.Column(db.String(200), nullable=True)
    correct_answer = db.Column(db.String(1), nullable=True)
    question_a = db.Column(db.Text, nullable=True)
    answer_a = db.Column(db.Text, nullable=True)
    question_b = db.Column(db.Text, nullable=True)
    answer_b = db.Column(db.Text, nullable=True)
    question_c = db.Column(db.Text, nullable=True)
    answer_c = db.Column(db.Text, nullable=True)
    question_d = db.Column(db.Text, nullable=True)
    answer_d = db.Column(db.Text, nullable=True)
    solution = db.Column(db.Text, nullable=True)
    solution_image_url = db.Column(db.String(200), nullable=True)
    reports = db.relationship('ReportedQuestion', backref='question', lazy='dynamic', cascade="all, delete-orphan")
    saved_by = db.relationship('SavedQuestion', backref='question', lazy='dynamic', cascade="all, delete-orphan")
    question_a_image_url = db.Column(db.String(200), nullable=True)
    answer_a_image_url = db.Column(db.String(200), nullable=True)
    question_b_image_url = db.Column(db.String(200), nullable=True)
    answer_b_image_url = db.Column(db.String(200), nullable=True)
    question_c_image_url = db.Column(db.String(200), nullable=True)
    answer_c_image_url = db.Column(db.String(200), nullable=True)
    question_d_image_url = db.Column(db.String(200), nullable=True)
    answer_d_image_url = db.Column(db.String(200), nullable=True)
